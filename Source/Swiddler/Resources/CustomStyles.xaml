<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="clr-namespace:Swiddler.Controls"
                    xmlns:vm="clr-namespace:Swiddler.ViewModels" 
                    xmlns:b="clr-namespace:Swiddler.Behaviors" 
                    xmlns:e="clr-namespace:Swiddler.MarkupExtensions" 
                    xmlns:cmd="clr-namespace:Swiddler.Commands" 
                    xmlns:x509crt="clr-namespace:System.Security.Cryptography.X509Certificates;assembly=System" 
                    xmlns:Converters="clr-namespace:Swiddler.Converters">

    <Style TargetType="CheckBox">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="ToolBar" TargetType="ToolBar">
        <Style.Resources>
            <SolidColorBrush x:Key="ToolBarHorizontalBackground" Color="{StaticResource {x:Static SystemColors.ControlColorKey}}"/>
            <SolidColorBrush x:Key="HoverButtonBrush" Color="#210080FF"/>
            <SolidColorBrush x:Key="PressedButtonBrush" Color="#007ACC"/>
            <SolidColorBrush x:Key="ToggledButtonBorder" Color="#3399ff"/>

            <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Margin" Value="5 2" />
            </Style>

            <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="Button">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Height" Value="24"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource HoverButtonBrush}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource HoverButtonBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource PressedButtonBrush}"/>
                                    <Setter Property="Foreground" Value="White"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="ToggleButton">
                <Setter Property="Height" Value="24"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource HoverButtonBrush}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource HoverButtonBrush}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource HoverButtonBrush}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ToggledButtonBorder}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource PressedButtonBrush}"/>
                                    <Setter Property="Foreground" Value="White"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="{StaticResource ToolBarHorizontalBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Border Height="32" x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                            <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" Margin="4" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowControlButton" TargetType="Button">
        <Style.Resources>
            <SolidColorBrush x:Key="Button.Static.Foreground" Color="#1E1E1E"/>
            <SolidColorBrush x:Key="Button.Static.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#E81123"/>
            <SolidColorBrush x:Key="Button.MouseOver.Foreground" Color="White"/>
            <SolidColorBrush x:Key="Button.Pressed.Background" Color="#F1707A"/>
            <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="White"/>
            <SolidColorBrush x:Key="Button.Inactive.Foreground" Color="#999999"/>
        </Style.Resources>

        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Static.Foreground}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource Button.Inactive.Foreground}"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="Foreground" Value="{StaticResource Button.MouseOver.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="Foreground" Value="{StaticResource Button.Pressed.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="IPAdapterComboBox" TargetType="ComboBox">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type vm:IPAddressItem}">
                    <TextBlock Text="{Binding IPAddress}" Margin="40 1 4 1" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="Margin" Value="-5 0 0 0"></Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="IPAdapterHeaderTemplate">
        <DataTemplate.Resources>
            <SolidColorBrush x:Key="GroupHeader.Background" Color="#F9FBFD"/>
            <SolidColorBrush x:Key="GroupHeader.Foreground" Color="#808080"/>

            <DataTemplate DataType="{x:Type vm:IPAdapterHeader}">
                <Border Margin="0 5 0 0" Background="{StaticResource GroupHeader.Background}">
                    <Grid UseLayoutRounding="True" Margin="0 0 16 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Controls:CrispImage x:Name="img" ImageName="Adapter" Width="34" Height="34" Margin="4 0" />
                        <StackPanel VerticalAlignment="Center" TextElement.Foreground="{StaticResource GroupHeader.Foreground}" Margin="4 0" Grid.Column="1">
                            <TextBlock Text="{Binding Name}" />
                            <TextBlock FontSize="10" Text="{Binding Description}" />
                        </StackPanel>
                    </Grid>
                </Border>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsUp}" Value="False">
                        <Setter TargetName="img" Property="Opacity" Value="0.5" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate DataType="{x:Type vm:IPAdapterEmptyHeader}">
                <Border Background="{StaticResource GroupHeader.Background}">
                    <TextBlock Foreground="{StaticResource GroupHeader.Foreground}" Text="Any &amp; Loopback Addresses" Margin="46 4 16 4" />
                </Border>
            </DataTemplate>

        </DataTemplate.Resources>

        <!-- {Binding Name} is instance from GroupedIPAddresses.GroupNameFromItem -->
        <ContentPresenter Content="{Binding Name}"/>
    </DataTemplate>

    <Style x:Key="FlatScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="#A6A6A6"/>
            <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="#606060"/>
            <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="#CDCDCD"/>

            <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}"/>
                                </Trigger>
                                <Trigger Property="IsDragging" Value="true">
                                    <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </Style.Resources>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{StaticResource ScrollBar.Static.Background}"/>
        <Setter Property="Width" Value="9"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Border Background="{TemplateBinding Background}" />
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumb}"/>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="9"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Border Background="{TemplateBinding Background}" />
                                <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumb}"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="FlatScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Rectangle x:Name="Corner" Grid.Column="1" Grid.Row="1" Fill="Transparent" />

            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>

            <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" 
                       Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" 
                       Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                       ViewportSize="{TemplateBinding ViewportHeight}" Style="{StaticResource FlatScrollBarStyle}">
                <ScrollBar.Visibility>
                    <MultiBinding Converter="{Converters:ScrollBarVisibility}">
                        <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="(Converters:ScrollBarVisibility.NonVisibleValue)" RelativeSource="{RelativeSource Self}" />
                    </MultiBinding>
                </ScrollBar.Visibility>
            </ScrollBar>

            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0"
                       Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" 
                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                       ViewportSize="{TemplateBinding ViewportWidth}" Style="{StaticResource FlatScrollBarStyle}" >
                <ScrollBar.Visibility>
                    <MultiBinding Converter="{Converters:ScrollBarVisibility}">
                        <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="(Converters:ScrollBarVisibility.NonVisibleValue)" RelativeSource="{RelativeSource Self}" />
                    </MultiBinding>
                </ScrollBar.Visibility>
            </ScrollBar>

        </Grid>
    </ControlTemplate>

    <Style x:Key="FlatScrollViewerStyle" TargetType="ScrollViewer">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource FlatScrollViewerTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HelpControlStyle" TargetType="ContentControl">
        <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Int32.MaxValue}" />
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Controls:CrispImage ImageName="HintIcon" Width="16" Height="16" Opacity="0.5" x:Name="img" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="img" Property="Opacity"  Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <DataTemplate x:Key="CertificateListItem" DataType="{x:Type x509crt:X509Certificate2}">
        <StackPanel Orientation="Horizontal">
            <Grid>
                <Controls:CrispImage ImageName="Certificate" Width="32" Height="32" Margin="4 2" x:Name="img" />
                <Controls:CrispImage ImageName="{x:Null}" Width="16" Height="16" Margin="0 4" x:Name="validity" HorizontalAlignment="Right" VerticalAlignment="Bottom" />
            </Grid>
            <ContentControl x:Name="content" Focusable="False" FocusVisualStyle="{x:Null}">
                <ContentControl.Template>
                    <ControlTemplate>
                        <StackPanel Orientation="Vertical" Margin="4 0">
                            <TextBlock FontWeight="Bold" Text="{Binding Converter={Converters:CertificateNameConverter}}"/>
                            <TextBlock>
                                <TextBlock.Text>
                                    <PriorityBinding>
                                        <Binding Path="NotAfter" Converter="{Converters:FormatConverter Format='Expires: {0:f}'}" />
                                    </PriorityBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </StackPanel>
                    </ControlTemplate>
                </ContentControl.Template>
            </ContentControl>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={Converters:AssignableTypeConverter Type=ComboBox}}" Value="True">
                <Setter Property="ImageName" Value="{Binding Converter={Converters:CertificateValidityConverter}}" TargetName="validity" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Converter={Converters:AssignableTypeConverter Type={x:Type x509crt:X509Certificate2}}}" Value="False">
                <Setter Property="Opacity" Value="0.5" TargetName="img" />
                <Setter Property="Template" TargetName="content">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock FontWeight="Bold" Text="(None)" Margin="4 8" Foreground="#a0a0a0" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <CollectionViewSource x:Key="SingleItemGroup">
        <CollectionViewSource.GroupDescriptions>
            <PropertyGroupDescription PropertyName="Name"/>
        </CollectionViewSource.GroupDescriptions>
        <CollectionViewSource.Source>
            <x:Array Type="Control">
                <Control />
            </x:Array>
        </CollectionViewSource.Source>
    </CollectionViewSource>
    
    <Style x:Key="SslSelectionComboBox" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemsSource" Value="{Binding Source={StaticResource SingleItemGroup}}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding Converter="{Converters:SslVersionStringConverter}">
                                <Binding Path="DataContext.EnableProtocolSsl30" RelativeSource="{RelativeSource AncestorType={x:Type ComboBox}}"/>
                                <Binding Path="DataContext.EnableProtocolTls10" RelativeSource="{RelativeSource AncestorType={x:Type ComboBox}}"/>
                                <Binding Path="DataContext.EnableProtocolTls11" RelativeSource="{RelativeSource AncestorType={x:Type ComboBox}}"/>
                                <Binding Path="DataContext.EnableProtocolTls12" RelativeSource="{RelativeSource AncestorType={x:Type ComboBox}}"/>
                                <Binding Path="DataContext.EnableProtocolTls13" RelativeSource="{RelativeSource AncestorType={x:Type ComboBox}}"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="Template" Value="{x:Null}"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="SslSelectionComboBoxHeaderTemplate">
        <StackPanel Margin="4" Orientation="Vertical" 
                    DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}">
            <StackPanel.Resources>
                <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
                    <Setter Property="Margin" Value="4"/>
                </Style>
            </StackPanel.Resources>
            <CheckBox Content="SSL 3.0" IsChecked="{Binding EnableProtocolSsl30}"/>
            <CheckBox Content="TLS 1.0" IsChecked="{Binding EnableProtocolTls10}"/>
            <CheckBox Content="TLS 1.1" IsChecked="{Binding EnableProtocolTls11}"/>
            <CheckBox Content="TLS 1.2" IsChecked="{Binding EnableProtocolTls12}"/>
            <CheckBox Content="TLS 1.3 (experimental)" IsChecked="{Binding EnableProtocolTls13}" IsEnabled="{e:SslProtocolSupport Name=Tls13}"/>
        </StackPanel>
    </DataTemplate>


    <Style x:Key="CertSettingsButton" TargetType="Button">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="b:Button.ClickOpensContextMenu" Value="True" />
        <Setter Property="ContextMenuService.Placement" Value="Bottom"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem">
                            <Setter Property="Visibility" Value="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <Setter Property="CommandTarget" Value="{Binding PlacementTarget, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}" />
                        </Style>
                    </ContextMenu.Resources>
                    <MenuItem Visibility="Visible" Command="{x:Static cmd:CertificateCommands.ViewCertificateDetails}" />
                    <Separator />
                    <MenuItem Command="{x:Static cmd:CertificateCommands.CreateCertificate}" />
                    <MenuItem Command="{x:Static cmd:CertificateCommands.CreateSelfSignedCA}" />
                    <Separator />
                    <MenuItem Visibility="Visible" Command="{x:Static cmd:CertificateCommands.ExportPEM}" />
                    <MenuItem Visibility="Visible" Command="{x:Static cmd:CertificateCommands.ExportRSA}" />
                    <MenuItem Visibility="Visible" Command="{x:Static cmd:CertificateCommands.ExportDER}" />
                    <MenuItem Visibility="Visible" Command="{x:Static cmd:CertificateCommands.ExportPFX}" />
                    <Separator />
                    <MenuItem Visibility="Visible" Command="{x:Static cmd:CertificateCommands.Delete}" />
                    <MenuItem Visibility="Visible" Command="{x:Static cmd:CertificateCommands.DeleteAll}" />
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Controls:CrispImage ImageName="GearBlack" Width="16" Height="16"
                                             SnapsToDevicePixels="True" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="#400080FF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleDataGrid" TargetType="DataGrid">
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="RowHeaderWidth" Value="0"/>
        <Setter Property="RowHeight" Value="23"/>
        <Setter Property="HorizontalGridLinesBrush" Value="LightGray"/>
        <Setter Property="VerticalGridLinesBrush" Value="LightGray"/>
        <Style.Resources>
            <Style TargetType="DataGridCell">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="DataGridCell">
                            <Border x:Name="border" BorderBrush="White" Background="White">
                                <ContentPresenter />
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>


    <Style TargetType="GridViewColumnHeader" x:Key="FlatListViewHeader">
        <Style.Resources>
            <SolidColorBrush x:Key="GridBrush">#e5e5e5</SolidColorBrush>
            <SolidColorBrush x:Key="HeaderBackgroundBrush">#fcfcfc</SolidColorBrush>
            <SolidColorBrush x:Key="HighlightBackgroundBrush">#e5f3ff</SolidColorBrush>
            <SolidColorBrush x:Key="HighlightBorderBrush">#79bcff</SolidColorBrush>

            <LinearGradientBrush x:Key="HeaderSeparatorBrush" >
                <GradientStop Color="#fcfcfc" Offset="0" />
                <GradientStop Color="#e5e5e5" Offset="1" />
            </LinearGradientBrush>

            <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
                <Setter Property="Width" Value="18"/>
                <Setter Property="Background" Value="{StaticResource HeaderSeparatorBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                                <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid UseLayoutRounding="True" SnapsToDevicePixels="True">
                        <Border BorderThickness="0 0 0 1" Name="HeaderBackground"
                                        BorderBrush="{StaticResource GridBrush}" 
                                        Background="{StaticResource HeaderBackgroundBrush}"/>

                        <Border Name="HeaderBorder" BorderThickness="0" Margin="0 0 1 1" BorderBrush="Transparent">
                            <ContentPresenter Name="HeaderContent"
                                                      TextElement.Foreground="Black"
                                                      Margin="4"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      RecognizesAccessKey="True"
                                                      SnapsToDevicePixels="True"/>
                        </Border>
                        <Thumb x:Name="PART_HeaderGripper"
                                       SnapsToDevicePixels="True"
                                       HorizontalAlignment="Right"
                                       Margin="0 0 -9 0"
                                       Style="{StaticResource GridViewColumnHeaderGripper}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{StaticResource HighlightBorderBrush}"/>
                            <Setter TargetName="HeaderBackground" Property="Background" Value="{StaticResource HighlightBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
